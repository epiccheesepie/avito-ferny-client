[{"/home/main/Рабочий стол/git/test-assignment/src/App.js":"1","/home/main/Рабочий стол/git/test-assignment/src/index.js":"2","/home/main/Рабочий стол/git/test-assignment/src/components/index.js":"3","/home/main/Рабочий стол/git/test-assignment/src/components/Main/index.jsx":"4"},{"size":130,"mtime":1606394889122,"results":"5","hashOfConfig":"6"},{"size":197,"mtime":1606393890357,"results":"7","hashOfConfig":"6"},{"size":41,"mtime":1606394958012,"results":"8","hashOfConfig":"6"},{"size":9236,"mtime":1606810502592,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"aswmpy",{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},"/home/main/Рабочий стол/git/test-assignment/src/App.js",[],"/home/main/Рабочий стол/git/test-assignment/src/index.js",[],"/home/main/Рабочий стол/git/test-assignment/src/components/index.js",[],"/home/main/Рабочий стол/git/test-assignment/src/components/Main/index.jsx",["19","20","21"],"import React from 'react';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport './Main.css';\nimport 'react-perfect-scrollbar/dist/css/styles.css';\n\nconst conf = {\n    background: '',\n    img: '',\n    text: '',\n    link: ''\n};\n\nconst Main = _ => {\n\n    const [bannerConfig, setBannerConfig] = React.useState(conf);\n\n    const handlerChangeText = (title,value) => {\n        setBannerConfig( prev => {\n            return {\n                ...prev,\n                [title]: value\n            };\n        });\n\n        console.log(bannerConfig);\n    };\n\n    return (\n        <div className=\"content\">\n            <div className=\"left\">\n                <PerfectScrollbar>\n                    <div className=\"container\">\n                        <Header />\n                        <Form \n                            bannerConfig={bannerConfig}\n                            onChange={handlerChangeText}\n                        />\n                    </div>\n                </PerfectScrollbar>\n            </div>\n\n            <div className=\"right\">\n                <Banner \n                    bannerConfig={bannerConfig}\n                />\n            </div>\n        </div>\n    );\n};\n\nconst Header = _ => {\n\n    return (\n        <div className=\"header\">\n            <div className=\"header__logo\">\n                <img className=\"logo\" src=\"https://static.avito.ru/@avito/bx-single-page-main/2.374.2/prod/web/resources/35f5a0d67b53.svg\" />\n            </div>\n            <div className=\"header__text\">\n                <span className=\"header__desc\">\n                    Приложение-редактор, для создания баннеров для сайта Avito.\n                </span>\n            </div>\n        </div>\n    );\n};\n\nconst Form = ({bannerConfig, onChange}) => {\n\n    const [openBack, setOpenBack] = React.useState(false);\n    const [openImg, setOpenImg] = React.useState(false);\n\n    const [fileName, setFileName] = React.useState('Загрузить...');\n    const handlerLoadImg = (e) => {\n        const loadName = e.target.value.split('\\\\').pop() || 'Загрузить...';\n        console.log(loadName);\n        if (loadName.length > 16) {\n            setFileName(_ => {\n                return loadName.substring(0, 16) + '...';\n            });\n        } else {\n            setFileName(loadName);\n        }\n    };\n\n    return (\n        <form className=\"form\">\n            <div className={`form__item ${openBack ? 'active' : ''}`}>\n                <span className=\"form__title button\" onClick={_ => setOpenBack(prev => !prev)}>\n                    Фон\n                </span>\n                {openBack && (\n                <div className=\"form__container form__container--row\">\n                    <label className=\"form__item button form__item--color\">\n                        <span className=\"row__title\">Цвет</span>\n                        <div className=\"option\">\n                            <input className=\"form__color\" type=\"color\" value={bannerConfig.background  } onChange={(e) => onChange('background', e.target.value)} />\n                        </div>\n                    </label>\n                    <div className=\"form__item button form__item--color\">\n                        <span className=\"row__title\">Градиент</span>\n                        <div className=\"option\">\n                            <div className=\"left-color\">\n                                <input className=\"form__color form__gradient\" type=\"color\" />\n                            </div>\n                            <div className=\"right-color\">\n                                <input className=\"form__color form__gradient\" type=\"color\" />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                )}\n            </div>\n            <div className={`form__item ${openImg ? 'active' : ''}`}>\n                <span className=\"form__title button\" onClick={_ => setOpenImg(prev => !prev)}>\n                    Картинка\n                </span>\n                {openImg && (\n                <div className=\"form__container form__container--row\">\n                    <div className=\"form__item\">\n                        <div className=\"option\">\n                            <input id=\"file\" className=\"form__file\" type=\"file\" accept=\"image/*,image/jpeg,image/png\" onChange={(e) => handlerLoadImg(e)} />\n                            <label for=\"file\" className=\"button--file button\">{fileName}</label>\n                        </div>\n                    </div>\n                    <div className=\"form__item\">\n                        <div className=\"option\">\n                            <input className=\"form__text form__text--img\" type=\"text\" placeholder=\"Ссылка...\" value={bannerConfig.img} onChange={(e) => onChange('img', e.target.value)} />\n                        </div>\n                    </div>\n                </div>\n                )}\n            </div>\n            <Text\n                title='text'\n                text='Текст'\n                placeholder='Введите текст'\n                onChange={onChange}\n                value={bannerConfig.text}\n            />\n            <Text\n                title='link'\n                text='Ссылка'\n                placeholder='Введите ссылку'\n                onChange={onChange}\n                value={bannerConfig.link}\n            />\n        </form>\n    );\n};\n\nconst Text = ({title, text, placeholder, onChange, value}) => {\n\n    const [isOpen, setIsOpen] = React.useState(false);\n\n    return (\n        <div className={`form__item ${isOpen ? 'active' : ''}`}>\n            <span className=\"form__title button\" onClick={_ => setIsOpen(prev => !prev)}>\n                {text}\n            </span>\n            {isOpen && (\n            <div className=\"form__container\">\n                <div className=\"option\">\n                    <input className=\"form__text\" type=\"text\" placeholder={placeholder} value={value} onChange={(e) => onChange(title, e.target.value)} />\n                </div>\n            </div>\n            )}\n        </div>\n    );\n};\n\n const Banner = ({bannerConfig}) => {\n\n    React.useEffect(_ => {\n        const decorationText = (text) => {\n            while (text.length > 30) {\n                let words = text.split(' ');\n                words.pop();\n                text = words.join(' ') + '...';\n            }\n    \n            return text;\n        };\n\n        const span = document.querySelector('.banner__text');\n        if (span) span.textContent = decorationText(bannerConfig.text);\n\n    },[bannerConfig.text]);\n\n    const imgRef = React.useRef();\n    const [posImg, setPosImg] = React.useState({\n        top: '0px',\n        left: '0px'\n    });\n    const handlerMouseDrag = (e) => {\n        e.preventDefault();\n        const img = e.currentTarget;\n        const banner = img.parentNode;\n        const left = e.clientX - img.getBoundingClientRect().left;\n        const top = e.clientY - img.getBoundingClientRect().top;\n\n        const onMouseMove = (e) => { \n            let newLeft = e.clientX - left - banner.getBoundingClientRect().left;\n            let newTop = e.clientY - top - banner.getBoundingClientRect().top;\n\n            const deviation = 10; //погрешность заступа за блок баннера\n            const imgWidth = img.offsetWidth; //ширина изображения\n            const imgHeight = img.offsetHeight; //высота изображения\n            const bannerWidth = banner.offsetWidth; //ширина баннера\n            const bannerHeight = banner.offsetHeight; //высота баннера\n\n            const leftEdge = -imgWidth;\n            const topEdge = -imgHeight;\n            const rightEdge = bannerWidth;\n            const botEdge = bannerHeight;\n\n            if (newLeft < leftEdge + deviation) newLeft = 0;\n            if (newLeft > rightEdge - deviation) newLeft = rightEdge - imgWidth;\n\n            if (newTop < topEdge + deviation) newTop = 0;\n            if (newTop > botEdge - deviation) newTop = botEdge - imgHeight;\n\n            setPosImg( _ => {\n                return {\n                    top: newTop + 'px',\n                    left: newLeft + 'px'\n                };\n            });\n        }\n\n        const onMouseUp = () => {\n            document.removeEventListener('mouseup', onMouseUp);\n            document.removeEventListener('mousemove', onMouseMove);\n            img.classList.remove('drag-img');\n        }\n\n        img.classList.add('drag-img');\n        document.addEventListener('mousemove', onMouseMove);\n        document.addEventListener('mouseup', onMouseUp);\n    };\n\n    return (\n        <div className=\"banner\" style={{backgroundColor: bannerConfig.background}}>\n            <div\n                className='banner__img'\n                style={posImg}\n                onDragStart={(e) => handlerMouseDrag(e)}\n            >\n                {bannerConfig.img && (\n                    <img src={bannerConfig.img} />\n                )}  \n            </div>\n\n            {bannerConfig.text && (\n                <span className=\"banner__text\"></span>\n            )}\n        </div>\n    );\n };\n\nexport default Main;",{"ruleId":"22","severity":1,"message":"23","line":56,"column":17,"nodeType":"24","endLine":56,"endColumn":142},{"ruleId":"25","severity":1,"message":"26","line":189,"column":11,"nodeType":"27","messageId":"28","endLine":189,"endColumn":17},{"ruleId":"22","severity":1,"message":"23","line":249,"column":21,"nodeType":"24","endLine":249,"endColumn":51},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'imgRef' is assigned a value but never used.","Identifier","unusedVar"]